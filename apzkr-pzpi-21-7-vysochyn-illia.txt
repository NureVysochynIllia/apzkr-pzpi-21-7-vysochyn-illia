РЕФЕРАТ

Пояснювальна записка до курсової роботи: 40 с., 8 рис., 5 табл., 3 додатки, 15 джерел.
КЛАСТЕР, СХОВИЩЕ, БРОНЮВАННЯ, КОРИСТУВАЧ, ГЕОГРАФІЧНЕ ПОЛОЖЕННЯ, СИСТЕМА РЕЗЕРВУВАННЯ, ОБ’ЄМ.
Об’єктом дослідження є індустрія зберігання та оренди сховищ, а саме актуальне на сьогоднішній день питання щодо процесу пошуку і бронювання сховищ з урахуванням географічного положення користувача.
Метою курсової роботи є розробка системи, яка дозволяє користувачам зручно знаходити та бронювати сховища, розташовані у різних кластерах, на основі їхнього місцезнаходження. Система надає можливість перегляду доступних сховищ, їх характеристик, а також здійснення бронювання в реальному часі. Крім того, система включає модуль візуалізації, який відображає розташування сховищ на карті та розраховує відстань до найближчого сховища.
Методи розробки базуються на технологіях Node.js та Express.js для створення серверної частини, MongoDB як бази даних, WPF для розробки смарт-пристрою, React для розробки веб-додатку, а також на технології Kotlin для розробки мобільного додатку.
У результаті роботи здійснено програмну реалізацію системи бронювання сховищ на основі місцезнаходження клієнта та прототип пристрою керування кластерами сховищ. Програмна система складається з веб-додатку, сервера, мобільного додатку та IoT-пристрою.

ВСТУП

Область застосування результатів даної курсової роботи охоплює індустрію зберігання та оренди сховищ. Система, що розробляється, спрямована на забезпечення зручного процесу пошуку і бронювання сховищ для користувачів, що є важливою складовою у сфері логістики та управління ресурсами.
Актуальність роботи зумовлена зростаючими потребами сучасного суспільства в ефективному управлінні простором та ресурсами. У зв'язку з урбанізацією та зростанням обсягів товарів, питання ефективного зберігання стає дедалі більш важливим. Впровадження інноваційних рішень для бронювання сховищ допоможе оптимізувати процеси зберігання та підвищити ефективність використання доступного простору.
Метою курсової роботи є розробка інтегрованої системи для пошуку та бронювання сховищ, яка базується на географічному положенні користувачів. Система має забезпечувати зручний інтерфейс для взаємодії користувачів з кластером сховищ, можливість перегляду характеристик сховищ, здійснення бронювання в реальному часі, а також відображення розташування сховищ на карті з розрахунком відстані до найближчого сховища.

1 ОБ’ЄКТ РОЗРОБКИ

1.1 Опис розділу
Розділ складається з опису об’єкту розробки та засобів програмної реалізації системи. Об'єкт розробки описується за допомогою Vision and Scope документу, який є важливим інструментом у процесі планування та розробки програмного забезпечення. Використання Vision and Scope допомагає визначити мету проекту, ключові вимоги та обмеження, а також встановити рамки та масштаб розробки. Це дозволяє забезпечити чітке розуміння цілей проекту як серед розробників, так і серед зацікавлених сторін, що, в свою чергу, сприяє ефективній координації роботи і успішному виконанню завдань.
1.2 Документ Vision and Scope
1 BUSINESS REQUIREMENTS
1.1 Background
У світі, де мобільність стає все більш важливою складовою нашого повсякденного життя, програмна система для здачі в оренду сховищ набуває великого значення. Проте, існують конкретні проблеми, з якими стикаються користувачі при здачі в оренду сховищ, що необхідно вирішити. Недоліки та недосконалості існуючих систем оренди сховищ, такі як нестабільність, недостатня безпека та обмежені можливості доступу, потребують уваги. Ця програмна система має на меті вирішити ці проблеми, забезпечуючи безпечне та зручне місце для зберігання особистих речей під час подорожей або перебування в публічних місцях. Її функціонал повинен включати стабільність та надійність, високий рівень безпеки та широкі можливості доступу для користувачів у будь-якому місці та часі. Цей функціонал можна буде забезпечити за допомогою розробки програмного застосунку на мобільні телефони, які є в кожної сучасної людини, а також забезпеченням безпечної технології зв’язку для IoT пристрою, який керуватиме місцями для сховищ.
1.2 Business Opportunity
Продукт не має прямих аналогів, бо більшість сучасних сховищ є фізичними з використанням людей чи спеціальних кас, у яких купляються жетони. Тобто наявні системи оренди не є комп’ютеризованими та не мають достатнього рівня сервісу. Це призводить до низької безпеки, неможливості взяти речі без повторної оплати чи навіть при прибутті до місця не знати, чи є вільні місця. Комп’ютеризованим конкурентом можна назвати лише довгострокову оренду сховищ великого вмісту.
Прикладом такої компанії можна назвати польську компанію Less Mess Storage, яка дозволяє онлайн замовити місця у сховищах їх будівель у десятках міст Польщі. Але ця компанія орієнтована на великі сховища(0.5м2 та більше) та довгострокове зберігання(місяць та більше) [1].
Також можемо розглянути німецьку компанію Boxie24, яка дозволяє орендувати приміщення для зберігання. Аналогічно до вищого прикладу тут мінімальний період для оренди це 2 місяці, а мінімальна кількість місця для оренди – це 1 м2. Також у цього сервісу є безкоштовний вивіз товарів на місце зберігання, але до 4 м2 [2].
Третім конкурентним сервісом можна розглянути українську компанію Sviy Sklad. Компанія має перевагу над вищезгаданими тим, що можна орендувати місце від одного дня та можливістю спеціальної оренди місця для мотоциклів та покришок. Але головним недоліком тут є розміщення складів в приміщеннях, далеких від туристичних маршрутів та мінімальним місцем для аренди у 1.2 м2 [3].
Основним джерелом прибутку буде саме надання послуг звичайним громадянам з годинною/добовою оплатою користування місцями сховищ. Також можна врахувати можливість тарифних планів для сім’ї (оренда кількох місць зі знижкою) та довгострокового користування сервісом для зберігання спеціалізованих речей для більш вибагливих користувачів (наприклад створення повноцінних складських приміщень з великим кімнатами для зберігання).
1.3 Business Objectives and Success Criteria
BO-1: Успішне впровадження системи: Головною метою є успішне впровадження програмної системи оренди сховищ у основних місцях людей, які подорожують: залізничних та автовокзалах, аеропортах.
BO-2: Задоволення клієнтів: Задоволення попиту людей на більш зручне та безпечне зберігання речей шляхом надання достатньої кількості місць.
BO-3: Забезпечення безпеки і надійності: Успіх полягатиме у відсутності можливих збоїв системи та зовнішнього втручання у механізовані сховища.
SC-1. Подальше використання системи: Успіх полягатиме у поширенні та сталому використанні системи в різних країнах.
SC-2. Збільшення кількості користувачів: Успіх вимірюватиметься збільшенням кількості користувачів орендою сховищ у громадських місцях на 10%.
1.4 Customer or Market Needs
Громадяни потребують зручних та доступних місць для зберігання, особливо у місцях, куди можуть приїжджати люди з інших міст и країн. Також громадяни вимагають гарантій щодо безпеки та надійності сховищ а також можливості легкого відкриття та закриття орендованих сховищ протягом оплаченого часу. Ще важливим є бронювання, перегляд доступних місць та геолокація цих камер. Також впровадження автоматизованих систем дозволить власникам місць зі сховищами зменшити витрати на утримання співробітників, які б приймали речі та збільшити безпеку своїх клієнтів.
1.5 Business Risks
Ri-1: Кібербезпека і захист даних: Існує ризик кібератак, які можуть спрямовуватися на нашу систему, порушуючи її безпеку та конфіденційність персональних даних.
Ri-2: Технічні проблеми: Можуть виникнути технічні збої, які можуть призвести до відмови системи під час сильної нагрузки.
Ri-3: Фізичні небезпеки: Існує ризик фізичного відкриття сховищ, що може бути одним з ризиків.
2 VISION OF THE SOLUTION
2.1 Vision Statement
Зробити революцію в глобальному досвіді подорожей і громадського простору, забезпечивши безперебійний доступ до безпечних і зручних рішень для зберігання для людей у всьому світі, використовуючи інтернет Starlink та акумуляторні батареї для відмовостійкості системи під час виключень світла. Наше бачення полягає в тому, щоб мандрівники та відвідувачі, незалежно від їхнього місця розташування чи обставин, були спокійні, знаючи, що їхні речі захищені, таким чином покращуючи їхню подорож та враження від неї. Систему також можна буде легко масштабувати через легке підключення та реєстрування IoT пристроїв кластерів сховищ у системі та встановлення за допомогою технології plug and use, що робить можливою майже нескінченний потенціал масштабування.
2.2 Major Features
MF-1 Електронна реєстрація користувачів та їх ідентифікація в системі.
MF-2 Забезпечення можливості бронювання через Інтернет, включаючи використання смартфонів та комп'ютерів.
MF-3 Забезпечення безпеки речей під час зберігання у сховищах за допомогою камер стеження та безпечної реалізації вбудованого ПЗ.
MF-4 Створення механізму для відкриття сховищ при необхідності за допомогою мобільного застосунку.
MF-5 Система ціни на оренду, яка формується в залежності від необхідних людині специфікацій та часу зберігання та можливість зміни її персоналом.
MF-6 Забезпечення можливості швидкого знаходження найближчих сховищ до тебе за допомогою геоінформаційної системи.
MF-7 Можливість використання вбудованого ПЗ у кластери сховищ для офлайн використання системи.
MF-8 Забезпечення адміністрування системи з достатнім рівнем безпеки.
MF-9 Забезпечення конфіденційності користувачів за допомогою створення закритої бази даних для конфіденційної інформації та шифрованого передавання даних між частинами системи.
2.3 Assumptions and Dependencies
AD-1 Припускається, що існує правова підтримка та легітимність використання електронних систем зберігання речей відповідно до законодавства країни.
AD-2 Припускається, що існує стабільний доступ до Інтернету та світла у автоматизованих кластерів та користувачів системи.
AD-3 Припускається, що існує доступ до необхідної інфраструктури для забезпечення безпеки системи та збереження персональних даних.
AD-4 Припускається, що користувачі мають доступ до сумісних технічних засобів (смартфони, комп'ютери тощо) для бронювання.
AD-5 Припускається, що існує підтримка та навчання для користувачів, які вперше користуються електронною системою оренди сховищ.
AD-6 Проект залежить від співпраці з власниками місць розміщення для визначення технічних вимог та створення необхідної інфраструктури.
AD-7 Успішне впровадження системи оренди сховищ залежить від розробки та використання надійних засобів нагляду за автоматичними кластерами.
AD-8 Реалізація проекту може вимагати залучення сторонніх розробників для розробки та підтримки деяких частин системи.
AD-9 Проект також залежить від залучення фахівців з кібербезпеки для проведення аудиту та тестування системи з метою ідентифікації потенційних загроз та вразливостей.
3 SCOPE AND LIMITATIONS
3.1 Scope of Initial Release
Серверна частина повинна включати:
	реєстрацію та авторизацію для клієнтів та адміністративного персоналу, використання шифрування при передачі цих даних;
	надання можливості для бронювання зареєстрованим користувачам з неможливістю інших користувачів бронювати чи використовувати вже заброньоване місце, врахування локального часу місць сховищ та користувачів;
	збереження даних про користувачів системи та їх історію оренди у закритих базах даних для забезпечення конфіденційності;
	створення та додавання нових кластерів до системи;
	створення системи для відкриття орендованого сховища за потреби за допомогою встановлення WebSocket з кластером;
	створення системи для автоматичного показу клієнтам найближчого доступного для бронювання сховища;
	створення статистики по відвідуванню та створення звітів по необхідності розширення кластерів.
Клієнтська частина повинна включати:
	інтерфейс для показу можливих сховищ, місць знаходження кластерів та бронювання їх;
	авторизація та реєстрація для користувачів та адміністративного персоналу;
	перегляд даних про історію оренди;
	можливість зміни мови інтерфейсу в залежності від регіону.
	адміністративна панель: керування створенням кластерів, їх функціонуванням, проведення цінової політики;
	перегляд результатів статистики по відвідуванню та створення звітів по необхідності розширення кластерів.
ІоТ частина повинна включати:
	термінали для офлайн оренди: спеціальні термінали для фізичної оренди необхідних сховищ;
	адміністрування сховищ для персоналу з можливістю відкриття за потреби при авторизації;
	автоматичне відкриття необхідних сховищ при закінченні оренди чи за потребою клієнта через мобільний додаток;
	можливість зміни мови інтерфейсу в залежності від регіону.
Мобільна частина має включати:
	реєстрацію та авторизацію для клієнтів;
	інтерфейс для показу можливих сховищ, місць знаходження кластерів та бронювання їх;
	створення системи для відкриття орендованого сховища за потреби;
	створення системи для автоматичного показу клієнтам найближчого доступного для бронювання сховища;
	перегляд даних про історію оренди;
	можливість зміни мови інтерфейсу в залежності від регіону.
3.2 Scope of Subsequent Releases
Подальші релізи будуть спрямовані на розширення функціоналу та покращення функцій системи, з урахуванням отриманого досвіду та потреб користувачів. Основні елементи обсягу подальших релізів можуть включати:
розширення безпеки та захисту даних: покращення заходів кібербезпеки та механізмів захисту виборчих даних;
можливість використання системи з інших регіонів із застосуванням різних мов;
реалізація системи підтримки клієнтів: розробка системи підтримки користувачів та навчання для ефективного користування системою;
розширення зони надання послуг на більші сховища та довгострокову оренду.
3.3 Limitations and Exclusions
LI-1 Наша система може зіткнутися з обмеженнями щодо розміщення великогабаритних або заборонених предметів, таких як небезпечні матеріали або великі шматки багажу, які перевищують зазначені розміри;
LI-2 Незважаючи на те, що ми прагнемо інклюзивності, для людей з обмеженими можливостями можуть існувати обмеження щодо доступу або використання наших сховищ, особливо в місцях з архітектурними бар’єрами.
LI-3 Доступність нашої системи може залежати від графіків технічного обслуговування, технічних проблем або непередбачених обставин, що призведе до тимчасової недоступності послуг зберігання. Ми прагнемо мінімізувати збої та надавати своєчасні сповіщення, коли це можливо.
LI-4 Хоча наше бачення передбачає глобальну доступність, можуть існувати географічні обмеження, які обмежують доступність наших складських приміщень у певних регіонах або країнах через логістичні, нормативні чи операційні проблеми.
4 BUSINESS CONTEXT
4.3 Operating Environment
Система буде працювати на будь яких пристроях у веб застосунку та буде мати програму на андроїд.
Сервер буде написано на Express JS 4.11 за допомогою JS. Будуть використовуватись бібліотеки BcrtptJS для шифрування, Express-validator для валідації даних у запитах на сервер, JsonWebToken для створення токенів для входу у систему, Moment для точного користування часом із врахуванням часових поясів. Зв’язок з базою даних буде забезпечено за допомогою бібліотеки Mongoose, яка представляє легкий спосіб взаємодії з базою даних за технологією ODM.
База даних буде працювати на основі Mongo DB та хмарних сервісів MongoDB Atlas.
Клієнтська частина буде працювати у браузері, мовою написання буде TS, HTML Та CSS. Будуть використовуватися фреймворки ReactTS 18, а також бібліотеки React-dom для використання середовища DOM, React-router-dom для використання маршрутизатора у веб-додатку, Axios для легшого створення запитів на сервер.
Як IoT частина буде використовуватися вбудована система на Windows 11 IoT Enterprise з сенсорним дисплеєм. Програма для терміналу буде розроблено за допомогою мови програмування С# та платформа WPF 4.5 з Entity Framework.
Для розробки мобільного застосунку буде використано мову Kotlin.
Користувачі будуть знаходитись у відповідних до сервера часових поясах. З’єднання буде стабільним через використання Amazon Web Services.
Також для контейнеризації буде використано Docker, а для управління розгортанням, масштабуванням та управлінням контейнерів буде використано Kubernetes.
Система буде працювати цілодобово, найбільший наплив буде у вихідні з 9:00 до 20:00.
Дані генеруватимуться клієнтами та зберігатимуться на стороні сервера, зв’язуючи та об’єднуючи кілька документів і дозволяючи надсилати запити.

2 РОЗРОБКА ПРОГРАМНОЇ СИСТЕМИ

2.1 Опис структури бази даних.
Проектування бази даних було проведено за допомогою створення ER-моделі даних (рис 2.1.1). Діаграма складається з 5 основних сутностей: Користувачі (Users), Бронювання (Bookings), Сховища (Stroages), Кластери сховищ (Clusters), Об’єми сховищ (Volumes).
База даних має такі зв’язки між сутностями:
1.	користувачі – бронювання (один до багатьох, один користувач може мати багато бронювань, але одне бронювання належить тільки одному користувачу);
2.	кластери – сховища (один до багатьох, один кластер може мати багато сховищ, але одне сховище може належати тільки одному кластеру);
3.	сховища – бронювання (один до багатьох, одне сховище може мати кілька бронювань в різний час, але бронювання містить тільки одне сховище);
4.	сховища – об’єми (один до багатьох, одне сховище може мати кілька об’ємів у різних одиницях виміру, але об’єм належить лише до одного сховища).
Програмна система як базу даних використовує MongoDb. Забезпечувати роботу з базою даних буде ODM Mongoose.
2.2 Опис загальної архітектури системи
Система в цілому представляє класичну клієнт-серверну архітектуру. Сервери є незалежними один від одного. Клієнти також функціонують паралельно і незалежно один від одного. Немає жорсткої прив'язки клієнтів до серверів. У програми є 3 різних сервери:
1.	основний сервер системи, який представляє собою приймач для запитів REST API, реалізує обробку даних та бізнес логіку, комунікує з ODM для зв’язку з сервером бази даних;
2.	сервер бази даних приймає дані від серверу системи та зберігає їх локально, забезпечуючи безпеку даних;
3.	сервер веб додатку, який формує сторінки для відправлення їх у браузер користувача.
Отже, можна сказати, що система використовує також трирівневу архітектурну модель програмного забезпечення, забезпечуючи незалежність кожного компонента, в результаті покращуючи можливість до горизонтального масштабування, швидкодії та доступності до системи в цілому.
Було розроблено діаграму системи у вигляді UML діаграми розгортання. Ця діаграма допомагає відслідкувати взаємодію в системі фізичних компонентів (вузли) та які програмні компоненти (артефакти) необхідно запускати на кожному з вузлів.
Система складається з 7 вузлів: сервер системи, сервер бази даних, сервер веб-додатку, комп’ютер клієнта, смартфон клієнта, кластер сховища(IoT пристрій) та сховище(механічний пристрій).
Сервер системи складається з кількох шарів, що забезпечують зв’язок клієнтів зі збереженими у базі даних значеннями та обробку бізнес логіки. Сервер бази даних забезпечує зв’язок з сервером системи за допомогою протоколу TCP/IP та отримує дані за допомогою ODM Mongoose. Сервер веб додатку надсилає сторінку для веб перегляду клієнту, яка ренедериться на його комп’ютері у браузері. Також дії у браузері надсилають запити на сервер за допомогою HTTPS. Також клієнт може взаємодіяти з системою за допомогою застосунку на смартфоні, та з нього будуть надсилатися запити HTTPS на сервер системи. IoT пристрій (кластер сховищ) надсилає запити HTTPS при фізичній оренді сховища. Також цей девайс підключений до сервера за допомогою WebSocket для отримання наказів на відкриття сховища при потребі клієнта. Кластер також підключається до свого сховища за допомогою дроту.
2.2 Розробка серверу системи
2.2.1 Опис архітектури серверної частини
Архітектура серверної частини програмної системи представляє з себе звичайний проект на ExpressJS, тобто 3-рівеневу архітектуру: маршрути, контролери/сервіси та Mongoose ODM. Сама система складається з 5 основних частин:
1.	маршрути (routers): використовуються для спрямування отриманого на сервер запиту у відповідний контролер. Також використовують, необхідне для продовження у контролері, проміжне програмне забезпечення;
2.	контролери (controllers): використовуються для обробки отриманого на сервер запиту. Також у цій програмній системі взаємодіють з моделями, для внесення змін в базу даних, та використовують сервіси для складнішої бізнес логіки. На вхід приймають параметри, рядок запиту чи тіло запиту;
3.	проміжне програмне забезпечення (middlewares): використовуються у проекті для перевірки на те, чи є користувач авторизованим, та чи надсилає він запит на відповідну до своєї ролі проміжну точку. Також використовуються для розшифровування імені користувача з JWT токену та передачі його далі, у контролер;
4.	моделі (models): використовується для ініціалізації бази даних та подальшої взаємодії з нею. За це все відповідає ODM Mongoose разом з базою даних Mongodb. До моделей можна звернутися у будь якій частині системи, що спрощує їх використання. Також моделі підтримують доволі складні сценарії використання, як створення об’єктів та перевірка правильності даних, наприклад в системі перевіряється правильне збереження часу роботи, як «([01]?[0-9]|2[0-3]):[0-5][0-9]» у самій моделі даних;
5.	сервіси (services): використовується для проведення складніших розрахунків, або винесення з контролерів функціоналу, який повторюється. В системі наявні сервіси для рахування відстані за координатами, за допомогою формули гаверсинуса. Також в сервісах є рахування різниці між датами у годинах та приведення об’ємів до різних одиниць виміру.
2.2.2 Побудова діаграм для серверу
Програмна система для здачі в оренду сховищ має 3 ролі користувачів: Користувач (User), Обслуговуючий персонал (Staff) та Адміністратор системи (Administrator).
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 2.2.2). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.
Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 2.2.3). Система серверу складається з таких компонентів: Моделі сутності (Models), Контролери (Controller), Сервіси (Services), Проміжне ПЗ (Middlewares),  Маршрутизатори (Routers), Сервер API (APIServer), WebSocket. Зовнішніми компонентами є База даних (Database), Клієнтський інтерфейс (Client) та Кластер сховищ (IoT Device).
2.2.3 Взаємодія з іншими компонентами
Програмна система використовує REST для спілкування клієнтів з сервером. API складається з 27 кінцевих точок у 6 маршрутах (Додаток А). Кінцеві точки обробляють передачу даних між сервером та клієнтом, направляючи дані які надходять на сервер у відповідні функції. На сервері програмної системи для цього використовується звичайна маршрутизація у ExpressJS зі створенням Route та передачею в них відповідних запитів. Запити з маршрутів передаються у контролери, де обробляються вхідні дані. Деякі кінцеві точки не містять жодної інформації на вхід, наприклад запит GET на “/clusters/”, де відправляються всі кластери. Деякі кінцеві точки на сервері містять параметри тіла, як запит POST на “/user/login/”, який приймає 2 строки: “username” та “password”. Також наявні такі, де використовуються параметри запиту, як “/rent/nearest/”, де ми передаємо у строчці довготу та широту: “/rent/nearest/?latitude=123&longitude=127”. Деякі кінцеві точки беруть ім’я користувача з токена авторизації, який присутній на всіх кінцевих точках, окрім логіну та реєстрації. Наприклад, для отримання інформації про акаунт користувача, запит GET на “/user/”, ми не передаємо в запит жодних даних, окрім JWT токену, а з нього вже отримуємо необхідне ім’я користувача.
2.3 Опис програми для IoT пристрою
2.3.1 Опис архітектури
Архітектура програми представляє собою 3-рівневу архітектуру: представлення, обробка даних та доступ до даних.
1.	представлення. В системі є сторінками WPF, які бачить кінцевий користувач. Дає змогу переглядати користувачу стан даних у системі, наприклад чи заброньовано сховище та яка ціна буде за оренду сховища у цей період;
2.	обробка даних. В системі представлено за допомогою сервісів обробки та C# файлів сторінок. Займаються обробкою даних, наприклад вираховування яка ціна буде за оренду сховища у цей період, та заповненням динамічних даних, як створення нових сховищ при додаванні та встановлення іншої мови інтерфейсу;
3.	доступ до даних. В системі представлено за допомогою сервісів зв’язку з сервером. Ці сервіси отримують та надають дані сервісу, наприклад відкриття сховища чи бронювання його.
2.3.2 Побудова діаграм
Програма для IoT девайсу передбачає використання девайсу тільки двома з трьох користувачів системи: адміністратором (Admin) та користувачем (User)
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 2.1). За діаграмою було визначено необхідну функціональність програми та взаємодію ролей з нею.
Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 2.3.2). Користувач має один шлях, який для звичайного використання має пройти без розгалуження активності.
Взаємодія компонентів програми представлено за допомогою UML діаграми взаємодії (рис 2.3.3). Взаємодія відбувається між користувачем, програмою та сервером. Сама діаграма складається з 2 основних сторінок програми для IoT девайсу.
Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 2.3.4). Система серверу складається з таких компонентів: Сервіси запитів (HttpServices), Сторінки програми (WPFPages), Сервіси обробки (Processing services), Сервіси сховищ (StorageServices). Зовнішніми компонентами є Сервер (Server), Сховище (Storage) та Користувач (User).
2.3.3 Взаємодія з іншими компонентами
Програма взаємодіє з іншими компонентами системи завдяки двом основним методам: HTTP запити та WebSocket. За допомогою HTTP запитів програма передає на сервер дані для авторизації девайсу, бронювання сховища, відкриття та закриття сховища, а також приймає інформацію щодо характеристик кластеру та його сховищ, доступність сховищ до бронювання та результат бронювання. За допомогою WebSocket з’єднання система отримує інформацію про відкриття чи закриття сховища віддалено (за допомогою мобільного додатку).
Отже, за допомогою цих технологій було встановлено з’єднання з сервером. Безпека запитів обумовлюється використанням JWT на основі акаунту адміністратора системи, що налаштовується при першому увімкненні системи
2.4 Розробка веб-клієнту
2.4.1 Опис архітектури
Архітектура веб частини системи представляє собою класичну архітектуру React проектів - компонентну архітектуру. Кожна сторінка представляє собою один компонент, перехід на який виконується за допомогою react-router-dom. Також окремі компоненти використовуються для речей, які мають кілька різних можливих значень, як заповнення списків кластерів.
Додаток побудований з використанням кількох ключових аспектів архітектури React, що включають:
Ізольованість компонентів: Кожен компонент відповідає за свій власний стан і створення інтерфейсу, що дозволяє ізолювати зміни та полегшує підтримку коду.
Модульність та повторне використання: Компоненти можуть бути легко перенесені і використані в інших частинах додатка, забезпечуючи модульність і повторне використання коду.
Прогнозованість: Дані передаються від батьківських компонентів до дочірніх через передавання значень, що робить потік даних передбачуваним і полегшує відлагодження.
Легкість розуміння: Простий односпрямований потік даних зменшує складність взаємодії між компонентами.
Вкладені та динамічні маршрути: Підтримуються як прості, так і складні маршрути, що включають вкладені маршрути та динамічні параметри.
Побічні ефекти та асинхронні операції
Обробка побічних ефектів: Використовуються хуки, такі як useEffect, для обробки побічних ефектів, таких як запити до API або інші асинхронні операції. Це дозволяє чітко розділяти створення інтерфейсу і логіку побічних ефектів.
Легкий життєвий цикл: Використання хуків дозволяє чітко контролювати, коли і як виконуються побічні ефекти, що підвищує керованість та стабільність додатка.
2.4.2 Побудова діаграм
Програмна система для здачі в оренду сховищ має 3 ролі користувачів: Користувач (User), Обслуговуючий персонал (Staff) та Адміністратор системи (Administrator).
Взаємодію користувачів з веб-застосунком представлено на діаграмі прецедентів (рис 2.4.1). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.
Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 2.4.2). Користувач має кілька шляхів, що відповідають за різні функції програми.
У результаті аналізу структури моделі програмної системи було виділено пакети, які складають систему. Ці пакети та зв’язки між ними можна  побачити на діаграмі пакетів (рис. 2.4.3). На діаграмі присутня взаємодія як внутрішніх пакетів, так і взаємодія з сервером.
Для розробки структури програми створено діаграму компонент(рис. 2.4.4). На ній відображено взаємодію основних компонентів веб програми: Сторінки (Page), Компоненти (Component), Інтерфейси (Interfaces), Запити (HttpRequest). Також система взаємодіє з зовнішніми компонентами: сервером та користувачами.
2.4.3 Взаємодія з іншими компонентами
Веб-клієнт взаємодіє з іншими компонентами системи завдяки HTTP запитам. За допомогою HTTP запитів веб-клієнт передає на сервер дані для авторизації користувача, бронювання сховища та поповнення балансу, а також приймає інформацію щодо характеристик кластеру та його сховищ, доступність сховищ до бронювання, результат бронювання та інформація про користувача.
Отже, за допомогою цих технологій було встановлено з’єднання з сервером. Безпека запитів обумовлюється використанням JWT на основі акаунту користувача системи, а вхід в акаунт може бути проведений у будь який момент та зберігається у локальному сховищі, а вихід з акаунту проводиться у шапці сайту.
2.5 Розробка мобільного застосунку
2.5.1 Опис архітектури
Архітектура програми представляє собою архітектурний патерн MVVM. Ця архітектура дає можливість легко прив’язувати дані та оновлювати їх у інтерфейсі за необхідності. Основні переваги MVVM:
Розробка користувацького інтерфейсу здійснюється дизайнером інтерфейсів за допомогою технології, більш-менш природної для такої роботи (XML).
Логіка користувацького інтерфейсу реалізується розробником як компонент ViewModel.
Функціональні зв'язки між користувацьким інтерфейсом та ViewModel реалізуються через біндинги (bindings), які, по суті, є правилами типу «якщо кнопка A була натиснута, повинен бути викликаний метод onButtonAClick() з ViewModel».
У моєму додатку це реалізується так:
1.	Model: Відповідає за бізнес-логіку і управління даними. Включає в себе репозиторії та джерела даних. Включає в себе сервіси та інтерфейси даних.
2.	View: Відповідає за відображення даних і взаємодію з користувачем. Включає в себе Activity та Fragment.
3.	ViewModel: Посередник між Model та View, що забезпечує підготовку та управління даними для відображення. Включає в себе Adapter.
2.5.2 Побудова діаграм
Програма для мобільного пристрою передбачає використання пристрою тільки одним з трьох користувачів системи: користувачем (User)
Взаємодію користувача з системою представлено на діаграмі прецедентів (рис 2.5.1). За діаграмою було визначено необхідну функціональність програми та взаємодію ролі з нею.
Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 2.5.2). Користувач має кілька шляхів, що відповідають за різні функції програми.
Взаємодія компонентів програми представлено за допомогою UML діаграми взаємодії (рис 2.5.3). Взаємодія відбувається між користувачем, програмою та сервером. Сама діаграма складається з 2 основних сторінок програми для мобільного пристрою.
Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 2.5.4). Система серверу складається з таких компонентів: Макет сторінки (Layout), Контролери інтерфейсу (UI controllers), Сервіси (Services), Фрагмент для карти (MapFragment), Сервіси запитів (APIService) та Моделі запитів/відповідей (Models). Зовнішніми компонентами є Сервер (Server), Інтерфейс Google Карт (Google API) та Користувач (User).
2.5.3 Взаємодія з іншими компонентами
Програма взаємодіє з іншими компонентами системи завдяки HTTP запитам. За допомогою HTTP запитів програма передає на сервер дані для авторизації користувача, бронювання сховища, відкриття та закриття сховища, а також приймає інформацію щодо характеристик кластеру та його сховищ, доступність сховищ до бронювання та результат бронювання. Також за допомогою API Google maps будується маршрут до найближчого кластеру до користувача.
Отже, за допомогою цих технологій було встановлено з’єднання з сервером. Безпека запитів обумовлюється використанням JWT на основі акаунту користувача системи, а вхід в акаунт може бути проведений при першому запуску програми, а вихід з акаунту проводиться у меню додатку.

3 ЗАСТОСУВАННЯ ПРОГРАМНОЇ СИСТЕМИ

3.1	Встановлення серверу
Для запуску серверу необхідно відкрити папку з кодом серверу та відкрити у папці термінал. Після цього необхідно написати у терміналі команду npm run dev для запуску серверу. Для роботи серверу необхідно мати встановлений Node.js на пристрої. Обмежень для пристрою немає.
3.2	Встановлення IoT програми
Для запуску IoT програми необхідно зайти у папку з збудованою програмою та запустити файл з розширенням .exe. Після цього людині, з акаунтом адміністратора, необхідно ввести свої дані для авторизації та номер кластера, до реалізацією якого є пристрій. Програма зберігає ці дані у файлі Options.json, тому їх не треба вводити при кожному запуску. Обмеження щодо пристрою: ОС  Windows 11 IoT Enterprise та сенсорний екран 8+ дюймів.
3.3	Встановлення серверу веб-клієнту
Для запуску серверу необхідно відкрити папку з кодом веб-клієнту та відкрити у папці термінал. Після цього необхідно написати у терміналі команду npm run dev для запуску серверу. Для роботи серверу необхідно мати встановлений Node.js на пристрої. Для клієнтів системи вхід в систему необхідно роботи як мінімум раз на 3 місяця, або до очищення кешу браузеру. Обмежень для пристрою немає.
3.4	Встановлення мобільного додатку
Для встановлення мобільного додатку треба завантажити файл з розширенням .apk та встановити його. При першому запуску необхідно ввести дані користувача, після цього робити вхід потрібно раз на 3 місяця. Обмеження щодо пристрою: ОС Android 10.0+.

ВИСНОВКИ

На основі проведеного аналізу та вивчення потреб ринку було розроблено програмну систему для пошуку та бронювання сховищ, яка базується на географічному положенні користувачів. Ця система є важливою складовою у сфері логістики та управління ресурсами, відповідаючи сучасним вимогам щодо ефективного використання простору.
На основі чого розроблено:
Аналіз ринку та потреб користувачів: Виявлено недоліки існуючих систем оренди сховищ, такі як нестабільність, недостатня безпека та обмежені можливості доступу.
Інноваційні технології: Використання сучасних ІТ-рішень, зокрема IoT, мобільних додатків та інтернет-зв'язку, для створення більш ефективної та безпечної системи зберігання.
Що розроблено:
Інтегрована система пошуку та бронювання сховищ: Включає серверну, клієнтську та IoT частини, які забезпечують взаємодію користувачів з кластером сховищ, перегляд характеристик сховищ, здійснення бронювання в реальному часі та відображення розташування сховищ на карті.
Функціональні можливості системи: Електронна реєстрація користувачів, бронювання через Інтернет, забезпечення безпеки речей за допомогою камер стеження, механізм для відкриття сховищ через мобільний додаток, автоматичний пошук найближчих сховищ та адміністрування системи.
Що дозволяє розробка:
Оптимізація процесів зберігання: Завдяки автоматизації та використанню сучасних технологій, система дозволяє ефективніше управляти простором та ресурсами, зменшуючи витрати на утримання персоналу та підвищуючи рівень обслуговування.
Підвищення безпеки та надійності: Використання шифрування даних та камер стеження забезпечує високий рівень безпеки та зменшує ризики кібератак та фізичного втручання.
Зручність для користувачів: Можливість бронювання в реальному часі, перегляд доступних місць та їх розташування на карті робить процес зберігання речей більш зручним та доступним.
Масштабованість та гнучкість: Легке підключення нових кластерів сховищ дозволяє швидко масштабувати систему та впроваджувати її у різних країнах та регіонах.
Економічна вигода: Основним джерелом прибутку є надання послуг з погодинною або добовою оплатою, а також можливість введення тарифних планів для сімей та довгострокової оренди, що забезпечує стабільний дохід та економічну ефективність системи.
Таким чином, розроблена система є сучасним, безпечним та ефективним рішенням для зберігання речей, яке має значний потенціал для впровадження та подальшого розвитку у сфері логістики та управління ресурсами.

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Веб сайт компанії Less Mass Storage. URL: https://www.lessmess.storage/en/ (дата звернення: 13.03.24).
2.	Веб сайт компанії Boxie24 у Німеччині. URL: https://www.boxie24.com/en-de/ (дата звернення: 13.03.24).
3.	Веб сайт команії Свій Склад. URL: https://sviysklad.com/ (дата звернення: 13.03.24).
4.	Річардс, М., Форд, Н. Основи архітектури програмного забезпечення: інженерний підхід. O'Reilly Media, 2020. - 432 с.
5.	Express - Node.js фреймворк. URL: https://expressjs.com/ (дата звернення: 27.03.2024).
6.	Mongoose документація. URL: https://mongoosejs.com/docs/ (дата звернення: 27.03.2024).
7.	Json Web Token введення. URL: https://jwt.io/introduction (дата звернення 29.03.2024).
8.	Басс, Л., Клементс, П., Казман, Р. Архітектура програмного забезпечення на практиці, третє видання. Бостон: Addison-Wesley, 2012. - 640 с.
9.	Windows Presentation Foundation документація. URL: https://learn.microsoft.com/en-us/dotnet/desktop/wpf/?view=netframeworkdesktop-4.8 (дата звернення 21.04.2024).
10.	Використання HTTP у додатках С# документація. URL: https://learn.microsoft.com/en-us/dotnet/api/system.net.http?view=netframework-4.8 (дата звернення 22.04.2024).
11.	Гофмейстер, К., Кручтен, П., Норд, Р. Л., Оббінк, Г., Ран, А., Америка, П. Загальна модель проектування архітектури програмного забезпечення, виведена з п'яти промислових підходів // Журнал системного та програмного забезпечення. - 2007. - 80 (1): 106–126.
12.	React документація. URL: https://react.dev/learn (дата звернення 14.05.2024).
13.	Kotlin документація. URL: https://kotlinlang.org/docs/home.html (дата звернення 24.05.2024).
14.	Розробка для Андроїд. URL: https://developer.android.com/develop (дата звернення 24.05.2024).
15.	Користування Google Maps Platform. URL: https://developers.google.com/maps/documentation?hl=en (дата звернення 28.05.2024).

ДОДАТОК А
Специфікація REST

Таблиця А.1 – Специфікація REST API
Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
Маршрут User (“/user/”)
/user/login/	POST	-	Вхід до системи з отриманням JWT token
/user/reg/	POST	-	Реєстрація користувача
/user/replenish/	PATCH	User	Поповнення балансу на суму
/user/	GET	User	Перегляд даних користувача та балансу
Маршрут Storage (“/storages/”)
/storages/	GET	Staff	Отримання усіх сховищ разом з об’ємом
/storages/	POST	Admin	Додавання сховища до кластеру
/storages/:id/	PATCH	Admin	Зміна даних сховища (без об’єму)
/storages/:id/	DELETE	Admin	Видалення сховища (разом з його об’ємом)
/storages/volume/	POST	Admin	Додавання додаткової міри виміру до об’єму сховища
/storages/volume/	PATCH	Admin	Зміна об’єму сховища (також відповідно змінює об’єми в інших одиницях виміру)
Маршрут Cluster (“/clusters/“)
/clusters/	GET	Staff	Отримання усіх кластерів (без сховищ)
/clusters/	ADD	Admin	Створення кластеру
/clusters/:id/	PATCH	Admin	Зміна даних кластеру

Продовження таблиці А.1
Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
/clusters/:id/	DELETE	Admin	Видалення кластеру з каскадним видаленням сховищ та об’ємів
/clusters/:id/	GET	Staff	Отримання одного кластеру з сховищами
Маршрут Admin (“/admin/”)
/admin/role/	PATCH	Admin	Зміна ролі користувача системи
/admin/import/	GET	Admin	Імпорт бази даних системи з раніше експортованих даних
/admin/export/	GET	Admin	Експорт бази даних системи до json файлу
/admin/users/	GET	Admin	Отримання даних користувачів системи з ід для зміни ролі
Маршрут Rent (“/rent/”)
/rent/	GET	User	Отримання кластерів за фільтрами: дані кластера, дані сховища, чи доступно у цей час
/rent/nearest/	GET	User	Отримання найближчого кластера за координатами
/rent/new/	POST	User	Орендування сховища, тільки якщо достатньо грошей на балансі
/rent/active/	GET	User	Активні бронювання (які почались та ще не скінчились). Сховища з відповіді можна відкрити користувачу.
/rent/all/	GET	User	Отримання всієї історії оренди у системі у користувача
/rent/open/	PATCH	User	Відкриття орендованого сховища

Продовження таблиці А.1
Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
Маршрут Staff (“/staff/”)
/staff/price/	POST	Staff	Зміна ціни за одне сховище чи для всіх сховищ кластеру
/staff/stat/	GET	Staff	Отримання інформації про доходність та кількість орендованих годин для всіх сховищ за 3 місяця
